import{e as n}from"./app.808106a9.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},t=n(`<h1 id="javascript-docs" tabindex="-1"><a class="header-anchor" href="#javascript-docs" aria-hidden="true">#</a> Javascript docs.</h1><h2 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><h3 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h3><p>Must start with [letter, under score, $]</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>
	<span class="token keyword">let</span> skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span>
	<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">20</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Data type in javascript</strong></p><ul><li>String</li><li>Array</li><li>Object</li><li>Number</li><li>Null</li><li>Symbol</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// check the data types.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h3><ul><li><p>Assignment</p><ul><li><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></li><li><code>**=</code> es6+ new features.</li><li><code>|=</code> es6+ Destructuring.</li><li><code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&gt;&gt;&gt;=</code> <code>&amp;=</code> <code>^=</code></li></ul></li><li><p>Comparison</p><ul><li><code>==</code> <code>===</code> <code>!=</code> <code>!==</code></li><li><code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code></li></ul></li><li><p>Arithmetic</p><ul><li><code>x++</code> return the value before adding or one.</li><li><code>++x</code> return the value after adding one.</li><li><code>--x</code></li><li><code>x--</code></li><li><code>-x</code> return the negative of its operand</li></ul></li><li><p>Logical</p><ul><li><code>&amp;&amp;</code></li><li><code>||</code></li><li><code>!</code><strong>Note</strong> precedence of <code>&amp;&amp;</code> is higher than <code>||</code></li></ul></li><li><p><strong>Bitwise operator</strong> works with bits</p><ul><li><code>&amp;</code> and ex. 15 &amp; 9 ---&gt; 1111 &amp; 1001 ---&gt; 1001</li><li><code>|</code> or ex. 1111 | 1001 ---&gt; 1111</li><li><code>^</code> xor ex. 1111 ^ 1001 ---&gt; 0110 <code>same bit return zero different bit return one</code></li></ul></li></ul><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h3><p><strong>properties of the promise</strong></p><ul><li><code>state</code> initially <code>pending</code> then changes to either <ul><li><code>fulfilled</code> resolve called</li><li><code>rejected</code> reject called</li></ul></li><li><code>result</code> initially <code>undefined</code> =&gt; <code>value</code> or <code>error</code></li></ul><p>There can be only a single result or error. <code>resolve</code>, <code>reject</code> expect only one argument or <code>none</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// if the job finished successfully.</span>

		<span class="token comment">//or </span>

		<span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// if an error occurred.</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>promise.then((result)=&gt; {}, (err) =&gt; {})</code></p><ul><li>first arg resolve function.</li><li>second arg rejected function.</li></ul><p><code>promise.catch((err)=&gt;{})</code> error handling.</p><p><code>promise.finally(() =&gt; {})</code> has no arguments.</p><h4 id="promise-api" tabindex="-1"><a class="header-anchor" href="#promise-api" aria-hidden="true">#</a> Promise api</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	
	Promise
		
		<span class="token comment">// takes an array of promises and returns a new promise.</span>
		<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token comment">// wait only for the first settled promise and gets its result or error.</span>
		<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>


</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced" aria-hidden="true">#</a> Advanced</h2><h3 id="notes" tabindex="-1"><a class="header-anchor" href="#notes" aria-hidden="true">#</a> Notes</h3><ol><li>Call Stack <ul><li>Mechanism to make interpreter track your call.</li><li>when you call a function its added to the stack.</li><li>when function executed its remove from the stack.</li><li>the interpreter continue calling from the last point.</li><li>call stack decked web api and leave it to the browser to handle it.</li></ul></li><li>Web api <ul><li>Methods available from Environment <code>Browser</code></li><li>when complete it add the callback to the callback queue.</li></ul></li><li>Event loop <ul><li>wait the call stack to finish.</li><li>get callback from callback queue.</li><li>add callback to call stack.</li></ul></li><li>Callback queue. <ul><li>function called and do the task.</li><li>action complete.</li><li>another function called</li></ul></li></ol><h3 id="function-binding" tabindex="-1"><a class="header-anchor" href="#function-binding" aria-hidden="true">#</a> function binding</h3><p>Usually we apply bind to fix <code>this</code> for an object method. so that we can pass it somewhere. like in setTimeout.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;ali&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> bindFunction <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// you can pass an  args to the log function </span>

	<span class="token function">bindFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	Object

		<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token punctuation">[</span>descriptions<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span>

		<span class="token comment">// these should used instead of \`__proto__\`</span>
		<span class="token comment">// \`__proto__\` bad in the speed</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="some-methods" tabindex="-1"><a class="header-anchor" href="#some-methods" aria-hidden="true">#</a> some methods</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
	<span class="token comment">// Note these methods are rarely used in practice.</span>
	Object
		<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// forbids the addition of new properties to the object</span>

		<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// forbids adding/removing of properties sets \`configurable: false\` for all existing properties</span>

		<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// forbids adding/removing/changing of properties. sets \`configurable: false, writable: false\` for all existing properties.</span>


		<span class="token comment">// checking</span>

		<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// check if adding properties is forbidden</span>

		<span class="token punctuation">.</span><span class="token function">isSeated</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// check if adding/removing properties is forbidden and all existing properties have \`configurable: false\`</span>

		<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// if it Object.freeze()</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="getter-and-setter" tabindex="-1"><a class="header-anchor" href="#getter-and-setter" aria-hidden="true">#</a> getter and setter</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
		_name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
		<span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Naif&quot;</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="prototypal-inheritance" tabindex="-1"><a class="header-anchor" href="#prototypal-inheritance" aria-hidden="true">#</a> Prototypal inheritance</h4><p><code>__proto__</code> getter || setter for prototype</p><ul><li>There references can&#39;t go in circles.</li><li>The value can be either an object or null. other types are ignore.</li><li>Object can&#39;t inherit from two others object.</li><li><code>this</code> is not affected by prototypes at all.</li><li><code>for in</code> loop iterates over inherited properties too.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	Object
		<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

		<span class="token comment">// keys() and values() ignore inherited properties</span>
		<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
	_name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

	<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token comment">// computed name [...]</span>
		<span class="token comment">// dynamics name for the methods</span>
		<span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;by&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>


	<span class="token comment">// getter and setter</span>
		<span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

	<span class="token comment">// making bound methods with class useful if you use</span>
	<span class="token comment">// setTimeout and you want to bind \`this\`</span>

		<span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><strong>Class inheritance</strong> Internals.</p><ul><li>methods remember their class/object in the internal <code>[[HomeObject]]</code> property. that&#39;s how <code>super()</code> resolves parent methods</li><li>So It&#39;s not safe to copy a method <code>super</code> from one object to another</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>
		<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Static properties and methods</strong> Usually, static methods are used to implement functions that belong to the class, but not to any particular object of it.</p><ul><li>Static properties and methods are inherited.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
		<span class="token keyword">static</span> version <span class="token operator">=</span> <span class="token string">&#39;3.4.5&#39;</span><span class="token punctuation">;</span>
		<span class="token keyword">static</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	User<span class="token punctuation">.</span>version<span class="token punctuation">;</span>
	User<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>private and protected properties</strong></p><ul><li><code>protected</code> properties are usually prefixed with an underscore <code>_name</code></li><li><code>private</code> there are only accessible from inside the class. to make the property <code>read-only</code> use only <code>getter</code></li></ul><hr><p><strong>instanceof operator</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Type checking methods</p><table><thead><tr><th>type</th><th>checking methods</th><th>return</th></tr></thead><tbody><tr><td>typeof</td><td>primitives</td><td>string</td></tr><tr><td>{}.toString</td><td>primitives and builtin object</td><td>string</td></tr><tr><td>instanceof</td><td>objects</td><td>true/false</td></tr></tbody></table><hr><h3 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error handling</h3><ul><li>try catch works synchronously.</li><li>use <code>throw</code> operator to generate an error.</li></ul><p><strong>built in</strong> constructors for standard errors.</p><ul><li><code>new Error(&#39;mess&#39;)</code></li><li><code>new SyntaxError(&#39;mess&#39;)</code></li><li><code>new ReferenceError(&#39;mess&#39;)</code></li><li><code>new TypeError(&#39;mess&#39;)</code></li></ul><p>Error objects have following properties.</p><ul><li><code>message</code></li><li><code>name</code> err constructor name</li><li><code>stack</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="oop" tabindex="-1"><a class="header-anchor" href="#oop" aria-hidden="true">#</a> OOP</h2><h3 id="defining-object" tabindex="-1"><a class="header-anchor" href="#defining-object" aria-hidden="true">#</a> Defining object</h3><ol><li>object literal</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token comment">// properties</span>
		name<span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span><span class="token punctuation">,</span>

		<span class="token comment">// methods</span>
		<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>


	<span class="token comment">// Accessing object properties</span>
		user<span class="token punctuation">.</span>name <span class="token comment">// dot notation</span>

		user<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token comment">// bracket notation</span>

	<span class="token comment">// Accessing object methods</span>
		user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ol start="2"><li>With new key word</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Naif&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>With <code>Object.create()</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> admin <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>With <code>Object.assign()</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> admin <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assign(&#39;target obj&#39;, &#39;src obj&#39;);</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>delete</strong> operator</p><ul><li>delete property not objects.</li><li>can&#39;t delete variable <code>let</code> and <code>const</code></li><li>can&#39;t delete obj if it set by <code>Object.freeze()</code></li><li>can&#39;t delete properties if it object flags with <code>configurable: false</code></li></ul><h3 id="constructor-function" tabindex="-1"><a class="header-anchor" href="#constructor-function" aria-hidden="true">#</a> Constructor function</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">function</span> <span class="token function">Phone</span><span class="token punctuation">(</span><span class="token parameter">serial<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// properties</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>serial <span class="token operator">=</span> serial<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>

		<span class="token comment">// methods</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serial <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">// check if it instance from the function contractor</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone <span class="token keyword">instanceof</span> <span class="token class-name">Phone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// or</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="built-in-constructors" tabindex="-1"><a class="header-anchor" href="#built-in-constructors" aria-hidden="true">#</a> Built in constructors</h3><p><strong>prototype</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token class-name">U</span><span class="token punctuation">.</span>prototype <span class="token comment">// return object have property and value</span>

	<span class="token comment">// add method to prototype chain</span>
		<span class="token class-name">U</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// Extend constructor features</span>
		<span class="token comment">// don&#39;t use this in production code.</span>
		<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;hi&#39;</span>

		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>



</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="meta-data" tabindex="-1"><a class="header-anchor" href="#meta-data" aria-hidden="true">#</a> Meta data</h3><ul><li>When you use <code>Object.defineProperty</code> you have access to control the property.</li><li>by default every thing in descriptor are <code>false</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token comment">// defineProperty(obj, prop, descriptor)</span>
	<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
		writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// edit it</span>
		enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// loop it</span>
		configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// delete or configure it</span>
		value<span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		name<span class="token operator">:</span> <span class="token punctuation">{</span>
			writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
			value<span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		age<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token comment">// get descriptor</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// clone obj</span>
		<span class="token keyword">let</span> clone <span class="token operator">=</span> Object
			<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>
				<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
				Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
			<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
		<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email
		<span class="token punctuation">}</span>

		<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
		<span class="token punctuation">}</span>


		<span class="token comment">// static properties and methods new in es6+</span>
			<span class="token keyword">static</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

			<span class="token keyword">static</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// inheritance</span>
		<span class="token comment">// if you don&#39;t have any method to add you don&#39;t need to extend the class.</span>

		<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
			<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>


	<span class="token comment">// getter and setter</span>
		<span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> Es6+</h2><h3 id="enhanced-object-literals" tabindex="-1"><a class="header-anchor" href="#enhanced-object-literals" aria-hidden="true">#</a> Enhanced object literals</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token comment">// property value short hand</span>
		<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>

		<span class="token keyword">let</span> info <span class="token punctuation">{</span>
			<span class="token comment">// old</span>
				user<span class="token operator">:</span> user

			<span class="token comment">// new</span>
				user<span class="token punctuation">,</span>
		<span class="token punctuation">}</span>

	<span class="token comment">// method shorthand</span>
		<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
			<span class="token comment">// old</span>
				<span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

			<span class="token comment">// new</span>
				<span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

	<span class="token comment">// Computed object property name</span>
		<span class="token comment">// old</span>
			<span class="token keyword">let</span> keyApi <span class="token operator">=</span> <span class="token string">&#39;23993&#39;</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
			obj<span class="token punctuation">[</span>keyApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span>

		<span class="token comment">// new</span>
			<span class="token keyword">let</span> keyApi <span class="token operator">=</span> <span class="token string">&#39;1234&#39;</span>
			<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
				<span class="token punctuation">[</span>keyApi<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>
			<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	Array
		<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&#39;element to create the array&#39;</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Iterable<span class="token punctuation">,</span> <span class="token punctuation">[</span>mapFunction<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;start default 0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

		<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token comment">// iterable any element we can loop it. like string.</span>
	<span class="token keyword">let</span> setArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">&#39;iterable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	setArr
		<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
		<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Naif&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">]</span>
	<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	map
		<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="symbols" tabindex="-1"><a class="header-anchor" href="#symbols" aria-hidden="true">#</a> Symbols</h3><p>Symbols are unique.</p><p><strong>Notes</strong></p><ul><li>when we loop over obj. <code>symbol</code> key will not looped.</li><li>Symbol not auto convert to string</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Symbol(&#39;label&#39;) add the param for debugging only</span>


	<span class="token comment">// search in global Symbol if it found will access it, if not found will create new one.</span>
		<span class="token keyword">let</span> mySymbol <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;testing&#39;</span><span class="token punctuation">)</span>

		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>mySymbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// testing</span>

		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySymbol<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h3><p><code>forEach</code> skip undefined value</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="weakset-weakmap" tabindex="-1"><a class="header-anchor" href="#weakset-weakmap" aria-hidden="true">#</a> weakSet , weakMap</h3><table><thead><tr><th>set + map</th><th>weakSet + weakMap</th></tr></thead><tbody><tr><td>any type of values</td><td>only object</td></tr><tr><td>you can use <code>size()</code></td><td>you can&#39;t get elements count</td></tr><tr><td>you can use <code>forEach</code></td><td>you can&#39;t use <code>forEach</code></td></tr><tr><td>you can get its keys</td><td>you can&#39;t get its keys</td></tr></tbody></table><h3 id="symbol-iterator-and-for-of-loop" tabindex="-1"><a class="header-anchor" href="#symbol-iterator-and-for-of-loop" aria-hidden="true">#</a> Symbol iterator and for of loop</h3><ul><li><code>Iterable</code> =&gt; object has <code>Symbol.Iterator</code></li><li><code>Iterator</code> =&gt; <ul><li>object with interface design for Iteration.</li><li>All <code>Iterators</code> has <code>next()</code> that return result object. <ul><li>The result object has two props. <ol><li><code>value</code> the next value</li><li><code>done</code> boolean value to tell if the next value exists or no.</li></ol></li></ul></li></ul></li></ul><p><code>for of</code></p><ol><li>call <code>Symbol.Iterator</code> with next method.</li><li>save value inside variable.</li><li>check for done. if its <code>true</code> exit the loop.</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;Naif&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> iterator <span class="token operator">=</span> name<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>Custom iterable object</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
		name<span class="token punctuation">;</span> <span class="token string">&#39;Ahmed&#39;</span><span class="token punctuation">,</span>
		age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> properties <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">return</span> <span class="token punctuation">{</span>
						value<span class="token operator">:</span> properties<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">,</span>
						done<span class="token operator">:</span> step<span class="token operator">++</span> <span class="token operator">===</span> properties<span class="token punctuation">.</span>length
					<span class="token punctuation">}</span>

				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="generators" tabindex="-1"><a class="header-anchor" href="#generators" aria-hidden="true">#</a> Generators</h3><ul><li>return a special object called <code>generator object</code></li><li>We can use <code>for of</code> to loop over the values</li><li>generators are iterable</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">looping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	looping<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// return {value: &#39;&#39;, done: false}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Delegating</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">Two</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> Modules</h3><ul><li><code>i<wbr>mport.meta</code> contains the information about the current module</li><li><code>this</code> in module is undefined.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token comment">/* admin.js */</span>
		<span class="token keyword">export</span> <span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

		<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
		<span class="token comment">// aliases</span>
		<span class="token keyword">export</span> <span class="token punctuation">{</span>
			a <span class="token keyword">as</span> rank
		<span class="token punctuation">}</span>

	<span class="token comment">/* app.js */</span>
		<span class="token keyword">import</span> <span class="token punctuation">{</span>admin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./admin.js&#39;</span>


		<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> admin <span class="token keyword">from</span> <span class="token string">&#39;./admin.js&#39;</span><span class="token punctuation">;</span>
		
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,116);function e(p,o){return t}var r=s(a,[["render",e]]);export{r as default};
